all:
  vars:
    ansible_connection: ssh
    ansible_user: vagrant
    ansible_become: true
    ansible_become_localhost: true
    ansible_ssh_private_key_file: "{{ inventory_dir }}/.vagrant/machines/default/vmware_desktop/private_key"
    #ansible_ssh_private_key_file: "{{ inventory_dir }}/.vagrant/machines/default/virtualbox/private_key"

    rbac_enabled: true
    auth_mode: oauth
    ssl_enabled: true
    #control_center_ssl_enabled: false
    ssl_custom_certs: true
    ssl_ca_cert_filepath: "{{ inventory_dir }}/certs/generated/ca.crt"
    ssl_signed_cert_filepath: "{{ inventory_dir }}/certs/generated/server.crt"
    ssl_key_filepath: "{{ inventory_dir }}/certs/generated/server.key"

    # mTLS
    ssl_client_authentication: required
    mds_ssl_client_authentication: required
    # erp = embedded rest proxy
    erp_ssl_client_authentication: requested
    schema_registry_ssl_client_authentication: none

    confluent_cli_download_enabled: false
    confluent_cli_custom_download_url: https://packages.confluent.io/confluent-cli/archives/latest/confluent_linux_arm64.tar.gz
    secrets_protection_enabled: false

    kafka_broker_custom_listeners:
      puremtls:
        name: CERTONLY
        port: 9094
        ssl_client_authentication: required
        ssl_enabled: true
        sasl_protocol: none

    kafka_broker_rest_proxy_mds_cert_auth_only: true
    schema_registry_mds_cert_auth_only: true
    kafka_connect_mds_cert_auth_only: true
    kafka_rest_mds_cert_auth_only: true
    ksql_mds_cert_auth_only: true
    control_center_mds_cert_auth_only: true
    schema_registry_kafka_listener_name: puremtls
    kafka_connect_kafka_listener_name: puremtls
    ksql_kafka_listener_name: puremtls
    control_center_kafka_listener_name: puremtls

    # oidc
    # variables required to enable OAuth on all components
    oauth_sub_claim: clientId
    oauth_groups_claim: groups
    oauth_token_uri: http://192.168.33.10:18080/realms/confluent/protocol/openid-connect/token
    oauth_issuer_url: http://192.168.33.10:18080/realms/confluent
    oauth_jwks_uri: http://192.168.33.10:18080/realms/confluent/protocol/openid-connect/certs
    oauth_expected_audience: Confluent,account,api://default
    # optional, needed when any additional scope is needed to include groups in the OAuth token
    # oauth_groups_scope: groups
    # optional,needed when OAuth IDP server has TLS enabled with custom certificate.
    #oauth_idp_cert_path: <cert_path>
    oauth_superuser_client_id: c3_client_app
    oauth_superuser_client_password: c3_client_app_secret
    # schema_registry_oauth_user: <sr_client_id>
    # schema_registry_oauth_password: <sr_client_secret>
    # kafka_rest_oauth_user: <rp_client_id>
    # kafka_rest_oauth_password: <rp_client_secret>
    # kafka_connect_oauth_user: <connect_client_id>
    # kafka_connect_oauth_password: <connect_client_secret>
    control_center_oauth_user: c3_client_app
    control_center_oauth_password: c3_client_app_secret

    ## Varibles to enable SSO in Control Center
    sso_mode: oidc
    # necessary configs in MDS server for sso in C3
    sso_groups_claim: groups # default
    # sso_sub_claim: sub # default
    sso_sub_claim: given_name
    # sso_groups_scope: groups # scope is optional, depending on the Idp
    sso_issuer_url: http://192.168.33.10:18080/realms/confluent
    sso_jwks_uri: http://192.168.33.10:18080/realms/confluent/protocol/openid-connect/certs
    sso_authorize_uri: http://192.168.33.10:18080/realms/confluent/protocol/openid-connect/auth
    sso_token_uri: http://192.168.33.10:18080/realms/confluent/protocol/openid-connect/token
    sso_client_id: c3_sso_login
    sso_client_password: tNaIzc3nd3MjHZXmvHLq3ya5mUB9HDuf
    sso_refresh_token: true # defaults to true

    kafka_broker_custom_properties:
      # authorizer.class.name: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      # super.users: User:admin
      allow.everyone.if.no.acl.found: true
      confluent.balancer.enable: true
      confluent.balancer.heal.uneven.load.trigger: "ANY_UNEVEN_LOAD"
      # enable consumer lag emitter - mbean https://docs.confluent.io/platform/current/kafka/monitoring.html#consumer-lag-offsets
      confluent.consumer.lag.emitter.enabled: true
      confluent.consumer.lag.emitter.interval.ms: 10000
      # extract from CN=myclient,OU=users,DC=confluent,DC=io just myclient
      #listener.name.certonly.ssl.principal.mapping.rules: RULE:^CN=(.*?),.*$/$1/L
      # avoid ssl endpoint identification
      ssl.endpoint.identification.algorithm: ""
      # REPLICATION FACTOR CLUSTER SINGLE NODE
      default.replication.factor: 1
      confluent.balancer.topic.replication.factor: 1
      confluent.metadata.topic.replication.factor: 1
      confluent.metadata.topic.min.insync.replicas: 1
      confluent.license.topic.replication.factor: 1
      confluent.security.event.logger.exporter.kafka.topic.replicas: 1

    kafka_controller_custom_properties:
      default.replication.factor: 1
      confluent.balancer.topic.replication.factor: 1
      confluent.metadata.topic.replication.factor: 1
      confluent.metadata.topic.min.insync.replicas: 1
      confluent.license.topic.replication.factor: 1
      confluent.security.event.logger.exporter.kafka.topic.replicas: 1

    control_center_custom_properties:
      confluent.controlcenter.mode.enable: "management"
      confluent.controlcenter.internal.topics.replication: 1
      confluent.metrics.topic.replication: 1
      confluent.monitoring.interceptor.topic.replication: 1
      confluent.controlcenter.command.topic.replication: 1

    schema_registry_custom_properties:
      kafkastore.topic.replication.factor: 1
      # This enables anonymous access with a principal of User:ANONYMOUS
      confluent.schema.registry.anonymous.principal: true
      authentication.skip.paths: /*

    # Using archive
    confluent_package_version: 7.8.0
    installation_method: archive
    confluent_archive_file_source: "{{ inventory_dir }}/confluent-7.8.0.tar.gz"
    confluent_archive_file_remote: false

    # oauth administrators
    kafka_broker_additional_system_admins:
      - User:superUser
      - User:alice

    rbac_component_additional_system_admins:
      - User:superUser

    schema_registry_additional_system_admins:
      - User:superUser

kafka_controller:
  hosts:
    confluent:
      ansible_host: 192.168.33.10

kafka_broker:
  hosts:
    confluent:
      kafka_broker_custom_properties:
        broker.rack: rack1
      ansible_host: 192.168.33.10
      # kafka_broker_custom_listeners:
      #   puremtls:
      #     hostname: 192.168.33.10

control_center:
  hosts:
    confluent:
      ansible_host: 192.168.33.10

schema_registry:
  hosts:
    confluent:
      ansible_host: 192.168.33.10
